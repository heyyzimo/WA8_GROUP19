////  ChatListViewController.swift//  WA8_group19////  Created by user267597 on 11/14/24.//import UIKitimport FirebaseAuthimport FirebaseFirestoreclass ChatListViewController: UIViewController {        let chatListView = ChatListView()    let childProgressView = ProgressSpinnerViewController()        var users: [UserModel] = []    let db = Firestore.firestore()    let currentUser = Auth.auth().currentUser        override func loadView() {        view = chatListView    }        override func viewDidLoad() {        super.viewDidLoad()        navigationItem.title = "Chats"        setupNavigationBar()        setupTableView()        fetchUsers()    }        func setupNavigationBar(){        let logoutBarButton = UIBarButtonItem(title: "Logout", style: .plain, target: self, action: #selector(handleLogout))        navigationItem.rightBarButtonItem = logoutBarButton    }        func setupTableView(){        chatListView.tableView.delegate = self        chatListView.tableView.dataSource = self        chatListView.tableView.register(UITableViewCell.self, forCellReuseIdentifier: "UserCell")    }        func fetchUsers(){        showActivityIndicator()        db.collection("users").getDocuments { [weak self] snapshot, error in            guard let self = self else { return }                        DispatchQueue.main.async {                self.hideActivityIndicator()            }                        if let error = error {                self.showAlert(message: error.localizedDescription)                return            }                        guard let documents = snapshot?.documents else { return }                        self.users = documents.compactMap { doc -> UserModel? in                let data = doc.data()                let user = UserModel(dictionary: data)                if user.uid != self.currentUser?.uid {                    return user                }                return nil            }                        DispatchQueue.main.async {                self.chatListView.tableView.reloadData()            }        }    }        @objc func handleLogout(){        let logoutAlert = UIAlertController(title: "Logging out!", message: "Are you sure you want to log out?", preferredStyle: .actionSheet)        logoutAlert.addAction(UIAlertAction(title: "Yes, log out!", style: .destructive, handler: { [weak self] _ in            guard let self = self else { return }            do {                try Auth.auth().signOut()                self.navigationController?.popToRootViewController(animated: true)            } catch {                self.showAlert(message: "Error occurred during sign out!")            }        }))        logoutAlert.addAction(UIAlertAction(title: "Cancel", style: .cancel))                self.present(logoutAlert, animated: true)    }          func showAlert(message: String){        let alert = UIAlertController(title: "Error", message: message, preferredStyle: .alert)        alert.addAction(UIAlertAction(title: "OK", style: .default))        present(alert, animated: true)    }}extension ChatListViewController: UITableViewDataSource, UITableViewDelegate {    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {         return users.count    }        func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {        let user = users[indexPath.row]        let cell = tableView.dequeueReusableCell(withIdentifier: "UserCell", for: indexPath)                var content = cell.defaultContentConfiguration()        content.text = user.name        content.secondaryText = user.email        cell.contentConfiguration = content                cell.accessoryType = .disclosureIndicator                return cell    }    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {        let selectedUser = users[indexPath.row]        let chatVC = ChatViewController(receiver: selectedUser)        navigationController?.pushViewController(chatVC, animated: true)        tableView.deselectRow(at: indexPath, animated: true)    }}extension ChatListViewController: ProgressSpinnerDelegate {    func showActivityIndicator(){        addChild(childProgressView)        view.addSubview(childProgressView.view)        childProgressView.view.frame = view.bounds        childProgressView.didMove(toParent: self)    }        func hideActivityIndicator(){        childProgressView.willMove(toParent: nil)        childProgressView.view.removeFromSuperview()        childProgressView.removeFromParent()    }}