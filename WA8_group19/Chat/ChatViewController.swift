//
//  ChatViewController.swift
//  WA8_group19
//
//  Created by user267597 on 11/14/24.
//


import UIKitimport FirebaseAuthimport FirebaseFirestoreclass ChatViewController: UIViewController {        let chatView = ChatView()    let childProgressView = ProgressSpinnerViewController()        var receiver: UserModel    var messages: [MessageModel] = []    let db = Firestore.firestore()    let currentUser = Auth.auth().currentUser    var chatId: String?        init(receiver: UserModel){        self.receiver = receiver        super.init(nibName: nil, bundle: nil)        setupChatId()    }        required init?(coder: NSCoder) {        fatalError("init(coder:) has not been implemented")    }            override func loadView() {        view = chatView    }        override func viewDidLoad() {        super.viewDidLoad()        navigationItem.title = receiver.name        setupTableView()        setupInputComponents()        setupKeyboardObservers()        listenForMessages()    }        func setupChatId(){        guard let currentUid = currentUser?.uid else { return }        let receiverUid = receiver.uid        chatId = currentUid < receiverUid ? "\(currentUid)_\(receiverUid)" : "\(receiverUid)_\(currentUid)"    }        func setupTableView(){        chatView.tableView.delegate = self        chatView.tableView.dataSource = self        chatView.tableView.register(SentMessageCell.self, forCellReuseIdentifier: "SentMessageCell")        chatView.tableView.register(ReceivedMessageCell.self, forCellReuseIdentifier: "ReceivedMessageCell")    }        func setupInputComponents(){        chatView.sendButton.addTarget(self, action: #selector(handleSend), for: .touchUpInside)        chatView.messageTextField.delegate = self    }        func setupKeyboardObservers(){        NotificationCenter.default.addObserver(self, selector: #selector(handleKeyboardShow), name: UIResponder.keyboardWillShowNotification, object: nil)        NotificationCenter.default.addObserver(self, selector: #selector(handleKeyboardHide), name: UIResponder.keyboardWillHideNotification, object: nil)    }        @objc func handleKeyboardShow(notification: Notification){        guard let userInfo = notification.userInfo,              let keyboardFrame = userInfo[UIResponder.keyboardFrameEndUserInfoKey] as? CGRect else { return }        let keyboardHeight = keyboardFrame.height                UIView.animate(withDuration: 0.3) {            self.chatView.messageInputContainerView.transform = CGAffineTransform(translationX: 0, y: -keyboardHeight)            self.chatView.tableView.transform = CGAffineTransform(translationX: 0, y: -keyboardHeight)        }                scrollToBottom()    }        @objc func handleKeyboardHide(notification: Notification){        UIView.animate(withDuration: 0.3) {            self.chatView.messageInputContainerView.transform = .identity            self.chatView.tableView.transform = .identity        }    }        @objc func handleSend(){        guard let text = chatView.messageTextField.text, !text.isEmpty,              let chatId = chatId,              let currentUid = currentUser?.uid else { return }                let messageData: [String: Any] = [            "senderId": currentUid,            "senderName": currentUser?.displayName ?? "Anonymous",            "text": text,            "timestamp": Timestamp(date: Date())        ]                db.collection("chats").document(chatId).collection("messages").addDocument(data: messageData) { [weak self] error in            if let error = error {                print("Error sending message: \(error)")                return            }                        DispatchQueue.main.async {                self?.chatView.messageTextField.text = ""                self?.scrollToBottom()            }        }    }        func listenForMessages(){        guard let chatId = chatId else { return }        db.collection("chats").document(chatId).collection("messages")            .order(by: "timestamp")            .addSnapshotListener { [weak self] snapshot, error in                if let error = error {                    print("Error fetching messages: \(error)")                    return                }                                guard let documents = snapshot?.documents else { return }                                self?.messages = documents.compactMap { doc -> MessageModel? in                    let data = doc.data()                    return MessageModel(dictionary: data)                }                                DispatchQueue.main.async {                    self?.chatView.tableView.reloadData()                    self?.scrollToBottom()                }            }    }        func scrollToBottom(){        if messages.count > 0 {            let indexPath = IndexPath(row: messages.count - 1, section: 0)            chatView.tableView.scrollToRow(at: indexPath, at: .bottom, animated: true)        }    }}extension ChatViewController: UITableViewDataSource, UITableViewDelegate {        // Data Source Methods    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {         return messages.count    }        func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {        let message = messages[indexPath.row]        let isSentByCurrentUser = message.senderId == currentUser?.uid        let cellIdentifier = isSentByCurrentUser ? "SentMessageCell" : "ReceivedMessageCell"                guard let cell = tableView.dequeueReusableCell(withIdentifier: cellIdentifier, for: indexPath) as? MessageCell else {            return UITableViewCell()        }                cell.configure(with: message)        return cell    }        // Delegate Methods    func tableView(_ tableView: UITableView, estimatedHeightForRowAt indexPath: IndexPath) -> CGFloat {        return 100    }}extension ChatViewController: UITextFieldDelegate {    func textFieldShouldReturn(_ textField: UITextField) -> Bool {        handleSend()        return true    }}extension ChatViewController: ProgressSpinnerDelegate {    func showActivityIndicator(){        addChild(childProgressView)        view.addSubview(childProgressView.view)        childProgressView.didMove(toParent: self)    }        func hideActivityIndicator(){        childProgressView.willMove(toParent: nil)        childProgressView.view.removeFromSuperview()        childProgressView.removeFromParent()    }}